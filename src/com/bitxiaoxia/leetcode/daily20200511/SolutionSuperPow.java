package com.bitxiaoxia.leetcode.daily20200511;

/**
 * @author JasonZhang
 * @date 2020/5/11 20:04
 */
public class SolutionSuperPow {
	public int superPow(int a, int[] b) {
		if (a == 0 || a == 1) {
			return a;
		}
		if (b.length == 1 && b[0] == 0) {
			return 1;
		}
		return binaryPow(a % 1337, b);
	}

	public int getPow(int a, int b) {
		a = a % 1337;
		int res = 1;
		for (; b > 0; b--) {
			res = (res * a) % 1337;
		}
		return a;
	}

	public int binaryPow(int a, int[] b) {
		if (b.length == 1 && b[0] == 1) {
			return a;
		}
		boolean flag = (b[b.length - 1] % 2 == 0);
		int[] mid = getMid(b);
		int mr = binaryPow(a, mid);
		if (flag) {
			return (mr * mr) % 1337;
		} else {
			return (mr * mr * a) % 1337;
		}
	}

	private int[] getMid(int[] b) {
		if (b.length == 1) {
			int[] res = new int[1];
			res[0] = b[0] / 2;
			return res;
		}
		if (b[0] == 1) {
			int[] res = new int[b.length - 1];
			boolean flag = true;
			for (int i = 0; i < res.length; i++) {
				int x = flag ? (10 + b[i + 1]) : b[i + 1];
				res[i] = x / 2;
				flag = x % 2 == 1;
			}
			return res;
		} else {
			int[] res = new int[b.length];
			boolean flag = false;
			for (int i = 0; i < res.length; i++) {
				int x = flag ? (10 + b[i]) : b[i];
				res[i] = x / 2;
				flag = x % 2 == 1;
			}
			return res;
		}
	}

	private int[] getArray(String n) {
		char[] cArr = n.toCharArray();
		int[] arr = {5, 6, 7, 4, 9, 1, 4, 4, 6, 9, 4, 5, 8, 9, 2, 1, 3, 2, 8, 9, 9, 6, 1, 7, 4, 3, 1, 7, 2, 0, 0, 4, 8, 7, 8, 8, 8, 5, 4, 7, 4, 1, 2, 5, 0, 4, 6, 6, 8, 4, 5, 9, 3, 8, 7, 9, 3, 0, 6, 6, 3, 6, 2, 1, 5, 0, 1, 5, 7, 8, 2, 4, 9, 6, 9, 1, 2, 5, 7, 1, 1, 2, 0, 6, 3, 9, 5, 6, 0, 1, 4, 3, 9, 6, 6, 6, 9, 8, 4, 6, 8, 8, 0, 7, 5, 1, 8, 7, 6, 6, 0, 0, 0, 3, 6, 5, 2, 2, 2, 4, 5, 8, 9, 7, 5, 6, 5, 6, 6, 9, 2, 4, 8, 5, 3, 5, 8, 1, 2, 5, 9, 5, 7, 2, 8, 3, 7, 2, 7, 1, 9, 3, 2, 8, 2, 7, 4, 7, 3, 2, 9, 7, 6, 7, 4, 9, 2, 3, 3, 6, 0, 4, 1, 7, 8, 1, 0, 8, 6, 0, 9, 5, 3, 1, 3, 7, 0, 0, 6, 5, 4, 5, 5, 1, 4, 9, 2, 8, 4, 7, 5, 4, 2, 8, 3, 2, 2, 4, 0, 8, 6, 2, 5, 9, 5, 0, 8, 6, 0, 4, 3, 5, 0, 8, 8, 6, 0, 2, 5, 4, 0, 2, 1, 4, 2, 4, 6, 4, 0, 9, 4, 6, 1, 9, 7, 6, 0, 5, 4, 2, 0, 0, 9, 2, 8, 9, 8, 0, 2, 5, 5, 4, 7, 8, 0, 0, 2, 8, 4, 3, 7, 1, 9, 0, 0, 7, 7, 2, 2, 3, 7, 4, 3, 6, 8, 4, 6, 7, 6, 0, 2, 1, 4, 2, 9, 4, 2, 4, 2, 8, 7, 2, 9, 8, 2, 2, 5, 1, 6, 0, 5, 3, 6, 0, 2, 5, 6, 8, 4, 3, 8, 8, 6, 4, 0, 8, 0, 2, 2, 2, 1, 9, 6, 2, 7, 9, 4, 5, 0, 1, 7, 7, 6, 3, 8, 8, 8, 6, 8, 2, 9, 8, 1, 6, 2, 3, 4, 2, 6, 8, 7, 9, 7, 3, 3, 6, 2, 8, 3, 5, 1, 0, 2, 9, 4, 2, 8, 4, 9, 6, 9, 8, 5, 2, 6, 9, 5, 2, 2, 3, 0, 1, 2, 7, 4, 6, 6, 9, 6, 1, 6, 9, 2, 8, 0, 8, 3, 8, 2, 2, 7, 1, 2, 4, 3, 9, 3, 1, 1, 7, 4, 2, 8, 9, 1, 5, 7, 9, 6, 5, 1, 2, 4, 3, 2, 6, 1, 5, 5, 5, 7, 4, 9, 0, 8, 4, 1, 3, 5, 2, 1, 0, 6, 1, 9, 0, 8, 6, 9, 4, 1, 0, 6, 7, 5, 1, 3, 8, 6, 0, 6, 4, 4, 5, 6, 4, 9, 7, 8, 5, 1, 1, 7, 0, 2, 8, 0, 3, 6, 9, 7, 9, 2, 6, 6, 7, 7, 1, 8, 3, 4, 4, 9, 0, 1, 7, 5, 0, 6, 5, 7, 0, 6, 4, 0, 0, 2, 0, 3, 0, 1, 3, 9, 3, 1, 5, 3, 8, 9, 3, 3, 3, 9, 5, 5, 0, 4, 0, 0, 1, 7, 8, 1, 5, 4, 3, 6, 9, 5, 1, 9, 6, 6, 9, 2, 7, 6, 7, 5, 7, 0, 1, 2, 9, 6, 8, 1, 0, 0, 1, 3, 8, 1, 6, 3, 8, 9, 1, 9, 4, 3, 8, 3, 9, 9, 5, 7, 8, 2, 4, 5, 4, 7, 8, 5, 5, 6, 6, 8, 6, 9, 1, 6, 3, 8, 0, 3, 9, 3, 2, 6, 8, 2, 9, 8, 2, 4, 7, 0, 8, 3, 7, 4, 1, 5, 1, 8, 3, 9, 6, 2, 8, 0, 8, 3, 0, 0, 6, 9, 4, 8, 5, 4, 1, 4, 2, 5, 0, 1, 7, 0, 7, 4, 6, 0, 0, 7, 8, 3, 8, 7, 7, 9, 7, 6, 2, 7, 8, 1, 8, 4, 9, 4, 9, 2, 0, 3, 7, 3, 7, 4, 5, 6, 1, 2, 6, 1, 1, 6, 6, 0, 5, 4, 9, 2, 2, 3, 1, 2, 4, 0, 9, 6, 6, 8, 8, 6, 3, 8, 1, 0, 4, 7, 8, 5, 9, 6, 8, 0, 3, 7, 2, 8, 1, 1, 3, 5, 5, 4, 9, 1, 6, 8, 7, 2, 6, 6, 1, 2, 6, 2, 4, 0, 9, 3, 8, 0, 9, 6, 3, 4, 3, 5, 5, 6, 9, 8, 3, 6, 4, 3, 7, 1, 1, 5, 5, 0, 3, 6, 2, 9, 1, 6, 1, 2, 9, 9, 3, 1, 8, 8, 5, 3, 3, 0, 0, 4, 8, 3, 0, 5, 8, 0, 8, 0, 7, 3, 0, 0, 2, 4, 1, 5, 0, 2, 7, 2, 4, 2, 3, 4, 0, 8, 7, 4, 9, 9, 0, 9, 5, 1, 6, 3, 3, 4, 5, 0, 0, 5, 0, 4, 1, 1, 9, 4, 5, 8, 6, 1, 1, 1, 5, 1, 9, 3, 7, 0, 4, 8, 2, 9, 1, 0, 3, 4, 5, 8, 4, 7, 6, 6, 3, 7, 9, 4, 3, 4, 2, 9, 8, 3, 0, 3, 7, 2, 8, 4, 4, 3, 2, 8, 2, 5, 9, 7, 9, 6, 8, 5, 5, 4, 1, 8, 3, 0, 2, 7, 7, 4, 8, 5, 0, 1, 0, 7, 3, 9, 1, 9, 4, 6, 8, 8, 1, 9, 6, 3, 5, 4, 8, 2, 0, 0, 0, 5, 2, 4, 4, 9, 0, 3, 6, 0, 4, 7, 7, 9, 8, 1, 0, 2, 9, 0, 0, 0, 9, 8, 5, 6, 2, 4, 8, 4, 6, 0, 0, 8, 4, 4, 0, 5, 9, 8, 5, 5, 5, 5, 6, 3, 6, 7, 7, 7, 7, 0, 7, 7, 8, 3, 3, 3, 9, 4, 7, 7, 4, 7, 7, 9, 4, 7, 4, 3, 6, 1, 1, 3, 6, 7, 9, 4};
		for (int i = 0; i < cArr.length; i++) {
			arr[i] = Character.digit(cArr[i], 10);
		}
		return arr;
	}


	private void printIntArray(int[] arr) {
		for (int i : arr) {
			System.out.print(i);
		}
		System.out.println();
	}

	public static void main(String[] args) {
		SolutionSuperPow solution = new SolutionSuperPow();
		int[] arr = solution.getArray("8549001789034");
		solution.printIntArray(arr);
		int[] tmp = solution.getMid(arr);
		while (tmp.length > 1 || tmp[0] >= 1) {
			solution.printIntArray(tmp);
			tmp = solution.getMid(tmp);
		}
		System.out.println();
	}
}
